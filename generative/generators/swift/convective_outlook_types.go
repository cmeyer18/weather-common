package swift

import (
	"fmt"
	"os"
	"strings"
	"time"
)

const convectiveOutlookSwiftTopComment = `// This file was generated by generative/generators/swift/convective_outlook_types.go.
// Please do not hand write.

import Foundation

`

const convectiveOutlookEnumConversion = `func ConvectiveOutlookTypesOptions() -> Array<Option> {
    var convertedConvectiveOutlookType: Array<Option> = []
    let allConvectiveOutlookTypeEnums: Array<ConvectiveOutlookTypes> = ConvectiveOutlookTypes.allCases
    
    for alert in allConvectiveOutlookTypeEnums {
        convertedConvectiveOutlookType.append(Option(name: alert.rawValue))
    }
    
    return convertedConvectiveOutlookType
}
`

func GenerateConvectiveOutlookSwift() {
	// Read the contents of the file
	filePath := "generators/templates/convective_outlook_types.txt"
	content, err := os.ReadFile(filePath)
	if err != nil {
		fmt.Printf("Failed to read file: %v\n", err)
		return
	}

	// Split the content into lines
	lines := strings.Split(string(content), "\n")

	// Add generated time
	generated := "// Generated on " + time.Now().String() + "\n"

	// Add block comment
	generated += convectiveOutlookSwiftTopComment

	generated += "enum ConvectiveOutlookTypes: String, CaseIterable {\n"

	// Process each line of the file
	for _, line := range lines {
		line = strings.TrimSpace(line)

		// Skip empty lines
		if line == "" {
			continue
		}

		// Extract the day and category
		spacelessString := strings.ReplaceAll(line, " ", "")

		// Generate the Swift enum case
		enumCase := fmt.Sprintf("\tcase %s = \"%s\"\n", spacelessString, line)
		generated += enumCase
	}

	// Close the Swift enum
	generated += "}\n\n"

	// Write enum conversion generated
	generated += convectiveOutlookEnumConversion

	// Write the generated Swift enum generated to a file
	file, err := os.Create("swift/ConvectiveOutlookTypes.swift")
	if err != nil {
		fmt.Printf("Error creating file: %v\n", err)
		return
	}
	defer file.Close()

	file.Write([]byte(generated))
}
