package golang

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"regexp"
	"strings"
	"time"
)

// EventType represents a single event type
type EventType string

// EventTypes represents a collection of event types
type EventTypes struct {
	EventTypes []EventType `json:"eventTypes"`
}

const weatherAlertsGoTopComment = `// This file was generated by generated/generators/golang/weather_alerts_enum.golang.
// Please do not hand write.

package golang

`

func GenerateWeatherAlertsGo() {
	// Send HTTP GET request to retrieve event types
	resp, err := http.Get("https://api.weather.gov/alerts/types")
	if err != nil {
		fmt.Printf("Error retrieving event types: %v\n", err)
		return
	}
	defer resp.Body.Close()

	// Read the response body
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Printf("Error reading response body: %v\n", err)
		return
	}

	// Parse the JSON response
	var eventTypes EventTypes
	err = json.Unmarshal(body, &eventTypes)
	if err != nil {
		fmt.Printf("Error parsing JSON: %v\n", err)
		return
	}

	// Convert event types to Go enums
	var enums string
	for _, eventType := range eventTypes.EventTypes {
		// Remove any non-alphanumeric characters and leading/trailing whitespace
		enumName := regexp.MustCompile(`[^a-zA-Z0-9]+`).ReplaceAllString(string(eventType), "")
		enumName = strings.TrimSpace(enumName)

		// Check if the enum name starts with a number
		if len(enumName) > 0 && isDigit(enumName[0]) {
			enumName = "_" + enumName
		}

		// Check if the enum name contains a hyphen
		if strings.Contains(enumName, "-") {
			enumName = strings.ReplaceAll(enumName, "-", "_")
		}

		enums += fmt.Sprintf("\t%s AlertType = \"%s\"\n", enumName, eventType)
	}

	// Create the output file
	fileName := "golang/weather_alerts.go"
	file, err := os.Create(fileName)
	if err != nil {
		fmt.Printf("Error creating file: %v\n", err)
		return
	}
	defer file.Close()

	// Add generated time
	generated := "// Generated on " + time.Now().String() + "\n"

	// Add the block comment
	generated += weatherAlertsGoTopComment

	// Write the Go enum to the file
	generated += "type AlertType string\n\n"

	// Write const header
	generated += "const (\n"

	// Write enums
	generated += enums

	// Close consts
	generated += ")\n"

	// Write bytes
	file.Write([]byte(generated))
}

// Helper function to check if a character is a digit
func isDigit(c byte) bool {
	return '0' <= c && c <= '9'
}
